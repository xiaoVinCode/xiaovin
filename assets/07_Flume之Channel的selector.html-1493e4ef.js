import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as c,c as p,a,b as e,d as s,f as r}from"./app-10c864ca.js";const o={},i=a("h4",{id:"_1-默认",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_1-默认","aria-hidden":"true"},"#"),e(" 1. 默认")],-1),u=a("p",null,"如果没有手动配置，source的默认channel选择器类型是replicating（复制），当然这个选择器只针对source配置了多个channel的时候。",-1),d={href:"https://flume.liyifeng.org/#id43",target:"_blank",rel:"noopener noreferrer"},v={href:"https://flume.liyifeng.org/#id44",target:"_blank",rel:"noopener noreferrer"},k=r(`<h4 id="_2-复制选择器-replicating" tabindex="-1"><a class="header-anchor" href="#_2-复制选择器-replicating" aria-hidden="true">#</a> 2. 复制选择器（replicating）</h4><p><strong>它是默认的选择器</strong>。</p><p>必需的参数已用 <strong>粗体</strong> 标明。</p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">默认值</th><th style="text-align:left;">解释</th></tr></thead><tbody><tr><td style="text-align:left;">selector.type</td><td style="text-align:left;">replicating</td><td style="text-align:left;"><code>replicating</code></td></tr><tr><td style="text-align:left;">selector.optional</td><td style="text-align:left;">–</td><td style="text-align:left;">指定哪些channel是可选的，多个用空格分开</td></tr></tbody></table><p>配置范例：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">a1.sources</span> <span class="token punctuation">=</span> <span class="token value attr-value">r1</span>
<span class="token key attr-name">a1.channels</span> <span class="token punctuation">=</span> <span class="token value attr-value">c1 c2 c3</span>
<span class="token key attr-name">a1.sources.r1.selector.type</span> <span class="token punctuation">=</span> <span class="token value attr-value">replicating</span>
<span class="token key attr-name">a1.sources.r1.channels</span> <span class="token punctuation">=</span> <span class="token value attr-value">c1 c2 c3</span>
<span class="token key attr-name">a1.sources.r1.selector.optional</span> <span class="token punctuation">=</span> <span class="token value attr-value">c3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这个例子中，c3配置成了可选的。向c3发送数据如果失败了会被忽略。c1和c2没有配置成可选的，向c1和c2写数据失败会导致事务失败回滚。</p><p>例子：replicating</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">agent1.sources.s1.type</span> <span class="token punctuation">=</span> <span class="token value attr-value">TAILDIR</span>
<span class="token key attr-name">agent1.sources.s1.positionFile</span> <span class="token punctuation">=</span> <span class="token value attr-value">\${exec_log_path}/position.json</span>
<span class="token key attr-name">agent1.sources.s1.filegroups</span> <span class="token punctuation">=</span> <span class="token value attr-value">fg_1 fg_2</span>
<span class="token key attr-name">agent1.sources.s1.filegroups.fg_1</span> <span class="token punctuation">=</span> <span class="token value attr-value">/data/collect-info.log</span>
<span class="token key attr-name">agent1.sources.s1.filegroups.fg_2</span> <span class="token punctuation">=</span> <span class="token value attr-value">/data/collect-info.log.*[^g][^z]$</span>
<span class="token key attr-name">agent1.sources.s1.maxBatchCount</span> <span class="token punctuation">=</span> <span class="token value attr-value">5000</span>
<span class="token key attr-name">agent1.sources.s1.selector.type</span> <span class="token punctuation">=</span> <span class="token value attr-value">replicating</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-多路复用选择器-multiplexing" tabindex="-1"><a class="header-anchor" href="#_3-多路复用选择器-multiplexing" aria-hidden="true">#</a> 3. 多路复用选择器（Multiplexing）</h4><p>Agent：多路模式一般有两种实现方式，一种是用来复制，另一种是用来分流。复制方式可以将最前端的数据源复制多份，分别传递到多个Channel中，每个Channel接收到的数据都是相同的。分流方式，Selector可以根据Header的值来确定数据传递到哪一个Channel。</p><figure><img src="https://static-resource-yang.oss-cn-shenzhen.aliyuncs.com/typora_pic/202304092239854.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>必需的参数已用 <strong>粗体</strong> 标明。</p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">默认值</th><th style="text-align:left;">解释</th></tr></thead><tbody><tr><td style="text-align:left;">selector.type</td><td style="text-align:left;">replicating</td><td style="text-align:left;">组件类型，这个是： <code>multiplexing</code></td></tr><tr><td style="text-align:left;">selector.header</td><td style="text-align:left;">flume.selector.header</td><td style="text-align:left;">想要进行匹配的header属性的名字</td></tr><tr><td style="text-align:left;">selector.default</td><td style="text-align:left;">–</td><td style="text-align:left;">指定一个默认的channel。如果没有被规则匹配到，默认会发到这个channel上</td></tr><tr><td style="text-align:left;">selector.mapping.*</td><td style="text-align:left;">–</td><td style="text-align:left;">一些匹配规则，具体参考下面的例子</td></tr></tbody></table><p>配置范例：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">a1.sources</span> <span class="token punctuation">=</span> <span class="token value attr-value">r1</span>
<span class="token key attr-name">a1.channels</span> <span class="token punctuation">=</span> <span class="token value attr-value">c1 c2 c3 c4</span>
<span class="token key attr-name">a1.sources.r1.selector.type</span> <span class="token punctuation">=</span> <span class="token value attr-value">multiplexing</span>
<span class="token key attr-name">a1.sources.r1.selector.header</span> <span class="token punctuation">=</span> <span class="token value attr-value">state        #以每个Event的header中的state这个属性的值作为选择channel的依据</span>
<span class="token key attr-name">a1.sources.r1.selector.mapping.CZ</span> <span class="token punctuation">=</span> <span class="token value attr-value">c1       #如果state=CZ，则选择c1这个channel</span>
<span class="token key attr-name">a1.sources.r1.selector.mapping.US</span> <span class="token punctuation">=</span> <span class="token value attr-value">c2 c3    #如果state=US，则选择c2 和 c3 这两个channel</span>
<span class="token key attr-name">a1.sources.r1.selector.default</span> <span class="token punctuation">=</span> <span class="token value attr-value">c4          #默认使用c4这个channel</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例子：multiplexing</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">agent1.sources.s1.type</span> <span class="token punctuation">=</span> <span class="token value attr-value">avro</span>
<span class="token key attr-name">agent1.sources.s1.bind</span> <span class="token punctuation">=</span> <span class="token value attr-value">0.0.0.0</span>
<span class="token key attr-name">agent1.sources.s1.port</span> <span class="token punctuation">=</span> <span class="token value attr-value">1234</span>
<span class="token key attr-name">agent1.sources.s1.interceptors</span> <span class="token punctuation">=</span> <span class="token value attr-value">i1</span>
<span class="token key attr-name">agent1.sources.s1.interceptors.i1.type</span><span class="token punctuation">=</span> <span class="token value attr-value">xxx.xxx.xxx.flume.KeyWordInterceptor$Builder</span>
<span class="token key attr-name">agent1.sources.s1.selector.type</span><span class="token punctuation">=</span> <span class="token value attr-value">multiplexing</span>
<span class="token key attr-name">agent1.sources.s1.selector.header</span> <span class="token punctuation">=</span> <span class="token value attr-value">kw</span>
<span class="token key attr-name">agent1.sources.s1.selector.mapping.kw_value1</span> <span class="token punctuation">=</span> <span class="token value attr-value">c_1</span>
<span class="token key attr-name">agent1.sources.s1.selector.mapping.kw_value2</span> <span class="token punctuation">=</span> <span class="token value attr-value">c_2</span>
<span class="token key attr-name">agent1.sources.s1.selector.mapping.kw_value3</span> <span class="token punctuation">=</span> <span class="token value attr-value">c_3</span>
<span class="token key attr-name">agent1.sources.s1.selector.mapping.kw_value4</span> <span class="token punctuation">=</span> <span class="token value attr-value">c_4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18);function g(m,h){const n=l("ExternalLinkIcon");return c(),p("div",null,[i,u,a("blockquote",null,[a("p",null,[e("既然叫做channel选择器，很容易猜得到这是source才有的配置。前面介绍过，一个souce可以向多个channel同时写数据，所以也就产生了以何种方式向多个channel写的问题（比如自带的 "),a("a",d,[e("复制选择器"),s(n)]),e(" ， 会把数据完整地发送到每一个channel，而 "),a("a",v,[e("多路复用选择器"),s(n)]),e(" 就可以通过配置来按照一定的规则进行分发，听起来很像负载均衡），channel选择器也就应运而生。")])]),k])}const x=t(o,[["render",g],["__file","07_Flume之Channel的selector.html.vue"]]);export{x as default};
